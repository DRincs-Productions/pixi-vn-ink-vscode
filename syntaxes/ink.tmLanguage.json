{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ink",
	"scopeName": "source.ink",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#todo"
		},
		{
			"include": "#choices"
		},
		{
			"include": "#conditionalBlocks"
		},
		{
			"include": "#conditionalChoices"
		},
		{
			"include": "#conditionalText"
		},
		{
			"include": "#variableText"
		},
		{
			"include": "#printingVariables"
		},
		{
			"include": "#knots"
		},
		{
			"include": "#glue"
		},
		{
			"include": "#alternatives"
		},
		{
			"include": "#gathers"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#tildeLogic"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.ink",
					"match": "//.*$"
				},
				{
					"name": "comment.block.ink",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"todo": {
			"patterns": [
				{
					"name": "keyword.other.todo.ink",
					"match": "\\bTODO:.*$"
				}
			]
		},
		"choices": {
			"patterns": [
				{
					"name": "keyword.other.choice.ink",
					"match": "^\\s*([\\*\\+]\\s*)+"
				}
			]
		},
		"gathers": {
			"patterns": [
				{
					"name": "keyword.other.gather.ink",
					"match": "^\\s*-(?!\\s*>)(\\s*-)*"
				}
			]
		},
		"knots": {
			"patterns": [
				{
					"name": "variable.other.ink",
					"match": "(?<=->\\s*)(END|DONE)"
				},
				{
					"name": "keyword.other.knot.ink",
					"match": "=+"
				},
				{
					"name": "entity.name.function.ink",
					"match": "(?<=->\\s*)[a-zA-Z0-9_]+(?:\\.[a-zA-Z0-9_]+)?"
				},
				{
					"name": "entity.name.function.ink",
					"match": "(?<=^=+\\s*)[a-zA-Z0-9_]+(?=\\s*=*)"
				},
				{
					"name": "keyword.other.divert.ink",
					"match": "->"
				},
				{
					"name": "entity.name.function.ink",
					"match": "(?<=->\\s*)[a-zA-Z0-9_]+"
				},
				{
					"name": "meta.function.parameters.ink",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#knots"
						},
						{
							"include": "#logic"
						}
					]
				}
			]
		},
		"glue": {
			"patterns": [
				{
					"name": "keyword.other.glue.ink",
					"match": "<>"
				}
			]
		},
		"variableText": {
			"patterns": [
				{
					"name": "meta.brace.curly.variableText.ink",
					"begin": "(?<!\\\\)\\{(?=[^}]*\\|)",
					"end": "(?<!\\\\)\\}",
					"patterns": [
						{
							"name": "keyword.other.ink",
							"match": "(?<=\\{)\\s*[&!~]"
						},
						{
							"name": "keyword.other.ink",
							"match": "(?<!\\\\)\\|"
						},
						{
							"include": "#knots"
						},
						{
							"include": "#glue"
						},
						{
							"include": "#choices"
						}
					]
				}
			]
		},
		"conditionalChoices": {
			"patterns": [
				{
					"name": "meta.brace.curly.conditionalChoice.ink",
					"begin": "(?<=^\\s*[\\*\\+]\\s*)\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#logic"
						}
					]
				}
			]
		},
		"conditionalText": {
			"patterns": [
				{
					"name": "meta.brace.curly.conditionalText.ink",
					"begin": "(?<!\\\\)\\{(?=[^}]*:)",
					"end": "(?<!\\\\)\\}",
					"patterns": [
						{
							"name": "meta.conditional.condition.ink",
							"begin": "(?<=\\{)",
							"end": ":",
							"patterns": [
								{
									"include": "#logic"
								}
							]
						},
						{
							"name": "keyword.operator.ternary.ink",
							"match": ":"
						},
						{
							"name": "meta.conditional.text.ink",
							"begin": "(?<=:)",
							"end": "(?=\\})",
							"patterns": [
								{
									"name": "keyword.other.alternative.ink",
									"match": "\\|"
								}
							]
						}
					]
				}
			]
		},
		"conditionalBlocks": {
			"patterns": [
				{
					"name": "meta.conditional.block.ink",
					"begin": "(?<!\\\\)\\{(?=[\\s\\S]*\\n)",
					"end": "(?<!\\\\)\\}",
					"patterns": [
						{
							"name": "meta.conditional.firstline.ink",
							"begin": "(?<=\\{)\\s*",
							"end": ":",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.block.begin.ink"
								}
							},
							"endCaptures": {
								"0": {
									"name": "keyword.operator.conditional-colon.ink"
								}
							},
							"patterns": [
								{
									"include": "#logic"
								}
							]
						},
						{
							"match": "^\\s*-\\s*else\\s*:",
							"captures": {
								"0": {
									"name": "keyword.control.else.ink"
								}
							}
						},
						{
							"name": "meta.conditional.branch.ink",
							"begin": "^(\\s*)-\\s*",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.conditional-dash.ink"
								}
							},
							"end": ":",
							"endCaptures": {
								"0": {
									"name": "keyword.operator.conditional-colon.ink"
								}
							},
							"patterns": [
								{
									"include": "#logic"
								}
							]
						},
						{
							"match": "^.*$",
							"name": "string.unquoted.blocktext.ink"
						}
					]
				}
			]
		},
		"printingVariables": {
			"patterns": [
				{
					"name": "meta.printing.variable.ink",
					"begin": "(?<!\\\\)\\{",
					"end": "(?<!\\\\)\\}",
					"patterns": [
						{
							"include": "#logic"
						}
					]
				}
			]
		},
		"logic": {
			"patterns": [
				{
					"name": "storage.type.temp.ink",
					"match": "\\btemp\\b"
				},
				{
					"name": "variable.other.local.ink",
					"match": "(?<=\\btemp\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
				},
				{
					"name": "keyword.operator.assignment.ink",
					"match": "="
				},
				{
					"name": "keyword.operator.arithmetic.ink",
					"match": "\\+|-|\\*|/|%|\\bmod\\b"
				},
				{
					"name": "keyword.operator.comparison.ink",
					"match": "==|!=|<=|>=|<|>|\\?"
				},
				{
					"name": "constant.language.boolean.ink",
					"match": "\\bnot\\b"
				},
				{
					"name": "support.function.math.ink",
					"match": "\\b(POW|RANDOM|INT|FLOOR|FLOAT)\\b"
				},
				{
					"name": "constant.language.boolean.ink",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.numeric.ink",
					"match": "\\b\\d+(?:\\.\\d+)?\\b"
				},
				{
					"name": "string.quoted.double.ink",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.ink",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "variable.other.global.ink",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
				}
			]
		},
		"alternatives": {
			"patterns": [
				{
					"name": "keyword.other.alternative.ink",
					"match": "(?<!\\\\)\\|"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"name": "meta.declaration.ink",
					"begin": "^\\s*(VAR|CONST)\\b",
					"beginCaptures": {
						"1": {
							"name": "storage.type.var.ink"
						},
						"2": {
							"name": "storage.type.const.ink"
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#knots"
						},
						{
							"name": "variable.other.global.ink",
							"match": "(?<=VAR\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
						},
						{
							"name": "variable.other.constant.ink",
							"match": "(?<=CONST\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
						},
						{
							"name": "keyword.operator.assignment.ink",
							"match": "="
						},
						{
							"begin": "(?<=\\=)",
							"end": "$",
							"patterns": [
								{
									"include": "#logic"
								}
							]
						}
					]
				}
			]
		},
		"tildeLogic": {
			"patterns": [
				{
					"name": "meta.tilde.logic.ink",
					"begin": "~",
					"beginCaptures": {
						"0": {
							"name": "keyword.other.tilde.ink"
						}
					},
					"end": "$",
					"patterns": [
						{
							"include": "#logic"
						}
					]
				}
			]
		}
	}
}